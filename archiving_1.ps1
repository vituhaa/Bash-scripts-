# 1) Объявление параметров.
param (
    [string]$sourcePath,
    [string]$archivePath,
    [int]$diskUsageThreshold,
    [int]$fileCount,
    [int64]$maxSize
)
# $sourcePath - строка, предоставляющая путь к папке с файлами, которые нужно архивировать.
# $archivePath - строка, представляющая путь, куда будет сохранён архив.
# $diskUsageThreshold - целое число, представляющее процент порога использования диска, при котором начнётся архивация.
# $fileCount - целое число, представляющее количество файлов, которые нужно заархивировать.
# $maxSize - переменная типа int64, представляющая максимальный размер диска в байтах, для расчёта использования диска.





# 2) Валидация параметров.
# происходит проверка на то, что все необходимые параметры заданы, если какого-то параметра нет, то выводится ошибка и программа завершается.
# -not - логическое отрицание.
# команда Write-Host используется для вывода текста в консоль.
if (-not $sourcePath) {
    Write-Host "Specify the path to the files to archive."
    exit 1
}
if (-not $archivePath) {
    Write-Host "Specify the path to create the archive."
    exit 1
}
if (-not $diskUsageThreshold) {
    Write-Host "Specify the disk usage percentage threshold."
    exit 1
}
if (-not $fileCount) {
    Write-Host "Specify the number of files to archive."
    exit 1
}
if (-not $maxSize) {
    Write-Host "Specify the max size."
    exit 1
}





# 3) Получаем размер папки.
$usedSpace = (Get-ChildItem -Path $sourcePath -Recurse | Measure-Object -Property Length -Sum).Sum
# Get-ChildItem - команда, кот используется для получения списка файлов и папок в указанном каталоге.
# -Path $sourcePath:  здесь -Path указывает на путь к папке, заданный переменной $sourcePath. Этот путь содержит файлы, которые мы будем анализировать.
# -Recurse - этот параметр позволяет рекурсивно просматривать все файлы и папки внутри указанных директорий, включая их подкаталоги. Это значит, что команда 
# соберёт информацию обо всех файлах в папке и её вложенных директориях.
# | - оператор конвейера, который передаёт результат команды Get-ChildItem следующей команде.
# Measure-Object - эта команда используется для выполнения измерений или подсчётов по объектам, переданным в ней (в нашем случае - файлы). Она может подсчитывать
# количество объектов, суммировать значения и вычислять среднее.
# -Property Length: Мы указываем команду Measure-Object для работы с конкретным свойством объектов. В данном случае, свойство Length — это размер каждого файла в 
# байтах.
# -Sum: Этот параметр говорит PowerShell, что мы хотим просуммировать значения, содержащиеся в свойстве Length. Таким образом, эта команда вычисляет общий 
# объём дискового пространства, занимаемого всеми файлами в папке и её подкаталогах.
# .Sum :
# Когда команда Measure-Object выполнена, она возвращает объект, содержащий несколько свойств, включая:
# Count — количество объектов (файлов),
# Average — среднее значение,
# Sum — сумма значений.
# В нашем случае мы обращаемся к свойству .Sum, чтобы получить суммарный размер всех файлов в байтах, который был вычислен командой Measure-Object.
$usedPercentage = [math]::Round(($usedSpace / $maxSize) * 100)
# $usedSpace - то, что уже посчитали (размер всех файлов в байтах в указанной папке).
# ($usedSpace / $maxSize) - получаем долю используемого пространства.
# *100 - преобразуем в проценты.
# [math]::Round - метод из библиотеки мат функций повершелла, который округляет число до ближайшего целого.






# 4) Проверка порога использования диска.
if ($usedPercentage -lt $diskUsageThreshold) { # -lt - less then - оператор меньше чем.
    Write-Host "Disk usage is $usedPercentage%, below the threshold $diskUsageThreshold% - archiving will not start."
    exit 0
}





# 5) Архивирование файлов.
$archiveName = Join-Path $archivePath "archive.zip"
# $archiveName = Join-Path $archivePath "archive.zip" - 
# Эта строка создает переменную $archiveName, в которой хранится полный путь к файлу archive.zip. Для этого используется команда Join-Path, которая соединяет 
# путь, хранящийся в переменной $archivePath, с именем файла archive.zip.

# Если архив уже существует, удаляем его
if (Test-Path $archiveName) { # if (Test-Path $archiveName) - Эта строка проверяет, существует ли файл с именем, хранящимся в переменной $archiveName. 
# Команда Test-Path возвращает True, если файл или директория существуют, и False в противном случае.
    Remove-Item $archiveName -Force
    # Remove-Item $archiveName -Force. Если файл существует (что определяется предыдущей проверкой), то эта команда удаляет его. 
    # Параметр -Force заставляет PowerShell удалить файл даже в случае, если файл защищен или открыт.
}





# 6) Получение списка файлов.
$fileList = Get-ChildItem -Path $sourcePath | Sort-Object LastWriteTime | Select-Object -First $fileCount
# Get-ChildItem: Команда, которая возвращает список всех файлов и папок в указанной директории. Это базовая команда для получения информации о содержимом 
# каталогов. Она аналогична команде dir в командной строке или ls в Unix-подобных системах.
# -Path $sourcePath: Параметр -Path указывает путь к директории, из которой нужно получить список файлов. Значение пути берётся из переменной $sourcePath, 
# которая была передана в скрипт пользователем.
# Sort-Object: Команда, которая сортирует объекты на основе заданного свойства.
# LastWriteTime: Это свойство файлов и папок, которое хранит дату и время последнего изменения файла.
# Select-Object: Команда, которая выбирает указанные объекты из потока данных. Она позволяет выбрать либо первые, либо последние объекты, либо фильтровать их
# по какому-либо критерию.
# -First $fileCount: Параметр -First указывает, что нужно выбрать первые $fileCount файлов из отсортированного списка. $fileCount — это переменная, значение 
# которой было передано в скрипт пользователем, и оно определяет, сколько файлов нужно обработать.





# 7) Проверка количества файлов.
if ($fileList.Count -lt $fileCount) {
    Write-Host "Not enough files to archive. Found $($fileList.Count) files, but need $fileCount."
    exit 0
}
# $fileList.Count - получение количества элементов (файлов) в списке $fileList




# 8) Архивирование файлов.
Write-Host "Archiving the oldest $fileCount files from '$sourcePath' to '$archiveName'..."
Compress-Archive -Path $fileList.FullName -DestinationPath $archiveName -CompressionLevel Optimal -Force
# Compress-Archive - команда создания зип-архивов.
# -DestinationPath: Параметр, указывающий путь к файлу архива, который будет создан.
# $archiveName: Это переменная, которая содержит полный путь и имя архива, который будет создан.
# -CompressionLevel: Параметр, который задаёт уровень сжатия файлов в архиве. PowerShell поддерживает несколько уровней сжатия: один из них Optimal.
# Optimal: Максимальное сжатие. Это наиболее эффективное сжатие, которое пытается минимизировать размер архива, но при этом может занять больше времени.
# -Force: Параметр, который заставляет команду перезаписать файл архива, если он уже существует. Если архив с таким же именем уже существует в указанном месте,
# то при наличии параметра -Force он будет удалён и заменён новым архивом.



# 9) Удаление архивированных файлов.
Write-Host "Deleting the oldest $fileCount files..."
$fileList | ForEach-Object { Remove-Item $_.FullName -Force }
# $fileList - переменная, которая содержит список файлов, выбранных ранее в коде.
# ForEach-Object - команда выполнения действия для каждого элемента в коллекции.
#  Remove-Item - команда для удаления файлов или папок. Удаляет указанный файл или папку из файловой системы.
# $_  - текущий файл из списка $fileList, который обрабатывается на данном шаге.
# FullName - свойство возвращает полный путь к файлу, включая директорию и имя файла.
# -Force - параметр который заставляет команду Remove-Item удалить файл даже в случае, если у него нет ограничения такие как атрибут "только для чтения".
Write-Host "Deleted $fileCount files."


# Краткое описание:
# 1) Объявление параметров.
# 2) Валидация параметров: происходит проверка того, что все необходимые параметры заданы. Если какой-то из параметров отсутствует, программа выведет сообщение
# и завершится с кодом 1, что означает ошибку.
# 3) Получаем размер папки.
# 4) Проверка порога использования диска.
# 5) Архивирование файлов.
# 6) Получение списка файлов.
# 7) Проверка количества файлов.
# 8) Архивирование файлов.
# 9) Удаление архивированных файлов.

