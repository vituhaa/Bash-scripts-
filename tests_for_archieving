#!/bin/bash



VIRTUAL_DISK="$HOME/virtual_disk.img"
MOUNT_POINT="$HOME/mount_point"
# переменная VIRTUAL_DISK содрежит путь к виртуальному диску, который будет создан в домашней директории пользователя с именем virtual_disk.img
# переменная MOUNT_POINT содержит путь к точке монтирования. это будет директория, в которую монтируется виртуальный диск.



dd if=/dev/zero of="$VIRTUAL_DISK" bs=1M count=1024
# команда dd создаёт файл виртуального диска
# if=/dev/zero - источник данных, это специальное устройство, которое выдаёт нули
# of="$VIRTUAL_DISK"  - файл,куда записываются данные (наш виртуальный диск)
# bs=1M  - размер блока, равный 1Мб
# count=1024  - количество блоков, которое будет записано, что создаст файл размером 1Гб (1024 Мб)



mkfs.ext4 "$VIRTUAL_DISK"
# эта команда создаёт файловую систему ext4 на виртуальном диске



mkdir -p "$MOUNT_POINT"
# создаёт директорию для точки монтирования, если она ещё не существует. флаг -p позволяет избежать ошибки, если директория уже есть.



sudo mount -o loop "$VIRTUAL_DISK" "$MOUNT_POINT"
# монтирует виртуальный диск в указанную точку монтирования.
# -o loop  - указывает на использование лупбек-устройства (виртуального устройства), что позволяет монтировать файл как диск.
# "$VIRTUAL_DISK"  - путь к вирутальному диску.
# "$MOUNT_POINT"  - директория, в которую диск будет смонтирован.



sudo chmod -R 777 "$MOUNT_POINT"
# меняет права доступа на дисректорию монтирования и всё её содержимое на полные права для всех пользователей:
# chmod -R  - рекурсивное изменение прав для всех файлов и подкаталогов.
# 777 - права чтения, записи и исполнения для всех (владельца, группы и остальных).



mkdir -p "$MOUNT_POINT/log"
# создаёт папку log на новом разделе, которая будет использоваться для хранения файлов журнала. 
# опция -p предотвращает  ошибку, если папка уже существует.



mkdir -p "$HOME/backup"
# создаёт папку backup в домашней директории пользователя, где будут храниться архивы.



echo "Виртуальный диск смонтирован в $MOUNT_POINT. Папка 'log' создана."




function generate_files()  # функция принимает два аргумента:
{
    local files_counter=$1  # кол-во файлов, которое нужно сгенерировать.
    local target_dir=$2   # директория, в которой будут созданы файлы.
    if [ -d "$target_dir" ]; then   # проверяет, существует ли директория target_dir
        echo "Генерация файлов по 25 Мб для теста: $files_counter шт."
        for i in $(seq 1 "$files_counter"); do   # цикл, который будет выполняться files_counter раз. команда seq создаёт последовательность чисел от 1 до заданного значения.
            dd if=/dev/zero of="$target_dir/file_$i" bs=1M count=25 status=none 
            # команда dd создаёт файл размером 25Мб (25 блоков по 1 Мб) в директории target_dir с именем file_$i, где $i - это текущий номер файла.
            sleep 0.1  # задержка в 0.1 секунды между созданием каждого файла для изменения времени последнего изменения файла.
        done
    fi
} 




function testcase()  #функция тестирования.
{
    local LOG_DIR=$1  # принимает аргумент LOG_DIR - директория с логами.
    local BACKUP_DIR=$2  # принимает аргумент BACKUP_DIR - директория для бэкапов.
    local THRESHOLD=$3  # принимает аргумент THRESHOLD - порог заполненности раздела в процентах.
    local N=$4  # принимает аргумент N - количество файлов, которые подлежат удалению.
    local FILES_COUNTER=$5  # принимает аргумент FILES_COUNTER - количество файлов, которые будут сгенерированы.
    echo "Начало теста. Порог: $THRESHOLD%, удалению подлежат файлы: $N шт."
    generate_files "$FILES_COUNTER" "$LOG_DIR"   # вызов функции generate_files для генерации файлов в директории логов.
    ./archieve_script.sh "$LOG_DIR" "$BACKUP_DIR" "$THRESHOLD" "$N" 
    # запускает скрипт архивации archieve_script.sh, передавая ему параметры: директорию логов, директорию для архива, порог заполненности и кол-во файлов для удаления.
    rm -rf "$LOG_DIR"/*
    # удаляет все файлы в директории логов.
    if [ -d "$BACKUP_DIR" ]; then
        rm -rf "$BACKUP_DIR"/*   # если директория для бэкапов существует, удаляет все файлы в этой директории.
    else   # если директория не существует, создаёт новую в домашней директории пользователя и удаляет файлы.
        LAST_DIR=$(basename "$$BACKUP_DIR")
        BACKUP_DIR="$HOME/$LAST_DIR"
        rm -rf "$BACKUP_DIR"/*
    fi
    echo "Тест завершён."
}



#тест 1. порог - 50%, удаляем 10 файлов, создаём 30 файлов по 25 мб (750 мб)
testcase "$MOUNT_POINT/log" "$HOME/backup" 50 10 30



#тест 2. порог - 50%, удаляем 10 файлов, создаём 10 файлов по 25 мб (250 мб), 
testcase "$MOUNT_POINT/log" "$HOME/backup" 50 10 10



#тест 3. порог - 50%, удаляем 10 файлов, создаём 30 файлов по 25 мб (250 мб), директория backup_dir не существует
testcase "$MOUNT_POINT/log" "$HOME/backup1" 50 10 30



#тест 4. порог - 50%, удаляем 10 файлов, создаём 30 файлов по 25 мб (250 мб), директория log_dir не существует
testcase "$MOUNT_POINT/log1" "$HOME/backup" 50 10 30



# Размонтируем виртуальный диск
sudo umount "$MOUNT_POINT"



# Удаляем точку монтирования
rmdir "$MOUNT_POINT"



# Удаляем файл виртуального диска
rm -f "$VIRTUAL_DISK"



echo "Виртуальный диск размонтирован, папка удалена, файл диска удалён."
